@page "/jobs"
@rendermode InteractiveServer
@inject JobService JobService
@inject NavigationManager NavigationManager

<PageTitle>Job Listings</PageTitle>

<h1>Job Listings</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="ShowActiveJobs">Active Jobs</button>
        <button class="btn btn-secondary" @onclick="ShowAllJobs">All Jobs</button>
    </div>

    @if (paginatedJobs.Any())
    {
        <div class="row">
            @foreach (var job in paginatedJobs)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@job.JobTitle</h5>
                            <p class="card-text">@(job.Description?.Length > 100 ? job.Description.Substring(0, 100) + "..." : job.Description)</p>
                            <p class="card-text"><small class="text-muted">Deadline: @job.Deadline.ToString("yyyy-MM-dd")</small></p>
                            <button class="btn btn-info" @onclick="() => ViewJobDetails(job.JobId)">View Details</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination Controls -->
        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                    </li>
                    
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                        </li>
                    }
                    
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <p>No jobs found.</p>
    }
}

@code {
    private List<Job> jobs = new List<Job>();
    private List<Job> paginatedJobs = new List<Job>();
    private bool isLoading = true;
    private bool showActiveOnly = true;
    
    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 6; // Show 6 jobs per page (2 rows of 3)
    private int totalPages => (int)Math.Ceiling(jobs.Count / (double)pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
    }

    private async Task LoadJobs()
    {
        if (showActiveOnly)
        {
            jobs = await JobService.GetActiveJobsAsync();
        }
        else
        {
            jobs = await JobService.GetAllJobsAsync();
        }
        
        // Reset to first page when loading new data
        currentPage = 1;
        
        // Apply pagination
        ApplyPagination();
        
        isLoading = false;
    }

    private void ApplyPagination()
    {
        // Calculate the items for the current page
        paginatedJobs = jobs
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;
            
        currentPage = page;
        ApplyPagination();
    }

    private async Task ShowActiveJobs()
    {
        showActiveOnly = true;
        await LoadJobs();
    }

    private async Task ShowAllJobs()
    {
        showActiveOnly = false;
        await LoadJobs();
    }

    private void ViewJobDetails(int jobId)
    {
        NavigationManager.NavigateTo($"/jobs/{jobId}");
    }
} 